#spring:
#  application:
#    name: user-service
#  rabbitmq:
#    host: 43.201.185.6
#    port: 5672
#    username: guest
#    password: guest

#eureka:
#  instance:
#    instance-id: user-microservice-instance
#
#  client:
#    register-with-eureka: true
#    fetch-registry: true
#    service-url:
#      defaultZone: http://3.35.145.182/eureka

spring:
  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: ${DB_HOST_URL}
#    username: ${DB_USERNAME}
#    password: ${DB_PASSWORD}
    url: jdbc:mysql://localhost:3307/user-service
#    url: jdbc:mariadb://localhost:23306/user-service
    username: root
    password: 1234
#    driver-class-name: org.mariadb.jdbc.Driver
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update # update #validate
    properties:
      hibernate.format_sql: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: true

#
#  kafka:
#    bootstrap-servers: localhost:29092
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      client-id: my-producer
#      retries: 1
#      batch-size: 16384
#      buffer-memory: 33554432
#      compression-type: snappy
#
#    consumer:
#      group-id: user-service
#      auto-offset-reset: latest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
##      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#      properties:
#        spring:
#          deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
#          json:
#            trusted.packages: "*"
#            type.mapping: like:com.example.userservice.infrastructure.kafka.KafkaConsumeEvent

#kafka-topic:
#  user-service: "my-topic"
#  user-service: ${USER_SERVICE_TOPIC}

