// 1. Import 추가
import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

// 2. buildscript 추가
buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'checkstyle'
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"	// 3. openAPI 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.18.2'	// 4. swaggerUI 플러그인 추가

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
	}
	implementation('org.springframework.boot:spring-boot-starter-undertow')
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.mysql:mysql-connector-j'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// spring kafka
//	implementation 'org.springframework.kafka:spring-kafka'

	// spring cloud
//	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
//	implementation 'org.springframework.cloud:spring-cloud-starter-config'
//	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'com.github.javafaker:javafaker:1.0.2'

	// 7. RestDocs 추가
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	// 8. openAPI3 추가
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion

	//mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

  	checkstyle 'com.puppycrawl.tools:checkstyle:10.9.1'

	// 9. SwaggerUI 추가
	swaggerUI 'org.webjars:swagger-ui:4.18.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
}

//dependencyManagement {
//	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//	}
//}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

jib { // https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin
	from {
		//https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#from-closure
		//https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#setting-the-base-image
		image = 'eclipse-temurin:17-jre'
	}
	container {
		creationTime = "USE_CURRENT_TIMESTAMP"
	}
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

checkstyle {
  configFile = file("config/checkstyle/google_checks.xml") // 설정 파일 경로 지정
  maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail
	toolVersion = "10.9.1" // 처음에 낮은 버전을 사용했더니 깨지는 현상이 있었다. 설정파일의 내용에 맞는 버전을 선택
}
tasks.withType(Checkstyle) {
	reports {
		xml.required = true
		html.required = true
	}
}
// 10. openapi3가 먼저 실행 - doFrist를 통한 Header 설정 (글에서 자세하게 설명)
tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
//	doFirst {
//		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")
//
//		def securitySchemesContent =  "  securitySchemes:\n" +  \
//                                      "    APIKey:\n" +  \
//                                      "      type: apiKey\n" +  \
//                                      "      name: Authorization\n" +  \
//                                      "      in: header\n" + \
//                                      "security:\n" +
//				"  - APIKey: []  # Apply the security scheme here"
//
//		swaggerUIFile.append securitySchemesContent
//	}
}

// 11. 생성된 openapi3 스펙을 기반으로 SwaggerUISample 생성 및 static/docs 패키지에 복사
bootJar {
	dependsOn ':openapi3'
//	dependsOn 'generateSwaggerUISample'
//	from("${generateSwaggerUISample.outputDir}") {
//	from('build/api-spec') {
//		into 'src/main/resources/static/docs'
//	}
}

//// 5. 생성된 API 스펙이 어느 위치에 있는지 지정
//swaggerSources {
//	sample {
//		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
////		setInputFile(file("${project.buildDir}/resources/main/static/docs/openapi3.yaml"))
//	}
//}

// 6. openapi3 스펙 생성시 설정 정보
openapi3 {
	server = "http://localhost:8080"
	title = "RESTDOC + SWAGGER를 이용한 TEST API 문서"
	description = "RestDocsWithSwagger Test Docs"
	version = "0.0.1"
	format = "yaml"
	outputDirectory="src/main/resources/static/docs"
}

